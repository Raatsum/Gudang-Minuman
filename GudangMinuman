#include <iostream>
using namespace std;

struct dnode
{
    int kode,harga,jmlhKardus;
    string nama;

    dnode* prev = nullptr;
    dnode* next = nullptr;
};

struct dllist
{
    dnode* head = nullptr; 
    dnode* tail = nullptr; 

    void addMinum(int kode, string nama, int jmlhKardus, int harga)
    {
        dnode* tmp = new dnode;
        tmp->kode = kode;
        tmp->nama = nama;
        tmp->jmlhKardus = jmlhKardus;
        tmp->harga = harga;
        if (head == nullptr){
            head = tmp;
            tail = tmp;
        } else{
            tail->next = tmp;
            tmp->prev = tail;
            tail = tmp;
        }
    }

    void lihatData(){
        dnode* cur = head;
        cout << "\n=============================================================\n";
        cout << "KODE \t NAMA \t\t\t JUMLAH \t HARGA(per kardus)\n";
        while (cur != nullptr){
            cout << cur->kode << "\t" << cur->nama << "\t\t" << cur->jmlhKardus << "\tRp" << cur->harga << " \n";
            cur =  cur->next;
        }
        cout << "\n=============================================================\n";
    }
    
    void insertionSort() {
        if (head == nullptr || head->next == nullptr) return;

        dnode* cur = head->next;  // Mulai dari node kedua
        while (cur != nullptr) {
            dnode* walker = cur;

            while (walker->prev != nullptr && walker->prev->kode > walker->kode) {
                // Tukar isi data antara walker dan walker->prev
                int tmpKode = walker->kode;
                string tmpNama = walker->nama;
                int tmpJmlh = walker->jmlhKardus;
                int tmpHarga = walker->harga;

                walker->kode = walker->prev->kode;
                walker->nama = walker->prev->nama;
                walker->jmlhKardus = walker->prev->jmlhKardus;
                walker->harga = walker->prev->harga;

                walker->prev->kode = tmpKode;
                walker->prev->nama = tmpNama;
                walker->prev->jmlhKardus = tmpJmlh;
                walker->prev->harga = tmpHarga;

                walker = walker->prev;  // Geser ke kiri untuk lanjut membandingkan
            }
            cur = cur->next;  // Lanjut ke node berikutnya
        }
    }
    
    void binarySearch(int kode){
        dnode* tmp = head;
        int panjang = 0;

        while(tmp != nullptr){
            panjang++;
            tmp = tmp->next;
        }

        int min = 0;  
        int max = panjang - 1;

        while(min<=max){
            int index_mid = min + ((max-min)/2);
            dnode* mid = head; 
            for (int i = 0; i<index_mid; i++){ 
                mid = mid->next; 
            }
            if(mid->kode == kode){ 
                cout << "kode: " << mid->kode << ", Nama: " << mid->nama << ", Jumlah: " << mid->jmlhKardus << ", Harga: Rp" << mid->harga << " \n";
                return;
            } else if(mid->kode > kode){ 
                max = index_mid - 1;
            } else if(mid->kode < kode){ 
                min = index_mid + 1;
            }
        }
        cout << "KODE " << kode << " TIDAK DITEMUKAN!!\n";
    }
    void hapusData(int kode) {
        if (head == nullptr) {
            cout << "Data kosong!\n";
            return;
        }

        dnode* cur = head;

        while (cur != nullptr && cur->kode != kode) {
            cur = cur->next;
        }

        if (cur == nullptr) {
            cout << "Data dengan kode " << kode << " tidak ditemukan.\n";
            return;
        }

        if (cur == head && cur == tail) {
            delete cur;
            head = tail = nullptr;
        }
        else if (cur == head) {
            head = head->next;
            head->prev = nullptr;
            delete cur;
        }
        else if (cur == tail) {
            tail = tail->prev;
            tail->next = nullptr;
            delete cur;
        }
        else {
            cur->prev->next = cur->next;
            cur->next->prev = cur->prev;
            delete cur;
        }

        cout << "Data dengan kode " << kode << " berhasil dihapus.\n";
    }

};

int main(){
    dllist gudang;

    int pilih, kode, harga, jmlhKardus;
    string nama;
    bool menu = true;
    char confirm = ' ';

    gudang.addMinum(1001,"Teh Botol Sosro",90,90000);
    gudang.addMinum(1009,"Susu Dancow",50,140000);
    gudang.addMinum(1008,"Pocari Sweat",20,150000);
    gudang.addMinum(1003,"Coca Cola",80,99000);

     while(menu){
        cout << "\n======================================\n";
        cout << "Silahkan Pilih Menu\n";
        cout << "0. Keluar\n";
        cout << "1. Tambah Data\n";
        cout << "2. Lihat Data\n";
        cout << "3. Sorting\n";
        cout << "4. Cari Data\n";
        cout << "5. Hapus Data\n";
        cout << "\n======================================\n";
        cout << "Silahkan pilih menu (0-5): ";
        cin >> pilih;

        switch(pilih){
            case 1:
                confirm = ' ';
                while (confirm != 't')
                {
                    cout << "-----------------------------------------\n";
                    cout << "Kode Minuman (4 digit): ";
                    cin >> kode;
                    cout << "Merk Minuman: ";
                    cin.ignore();
                    getline(cin,nama);
                    cout << "jumlah stok kardus: ";
                    cin >> jmlhKardus;
                    cout << "Harga Rp";
                    cin >> harga;
                    gudang.addMinum(kode,nama,jmlhKardus,harga);
                    cout << "\n-----------------------------------------\n";
                    cout << "Apakah ingin menambah data lagi (y/t)? ";
                    cin >> confirm;

                }
                break;
            case 2:
                confirm = ' ';
                while (confirm !='y'){
                    gudang.lihatData();
                    cout << "Apakah ingin kembali ke menu (y/t)? ";
                    cin >> confirm;
                }
                break;
            case 3:
                gudang.insertionSort();
                cout << "Sorting berhasil. Kode telah diurutkan!\n";
                gudang.lihatData();
                break;
            case 4:
                cout << "Masukkan kode: ";
                cin >> kode; 
                gudang.binarySearch(kode);
                break;
            case 5:
                confirm = ' ';
                while (confirm !='t'){
                    cout << "kode: ";
                    cin >> kode;
                    gudang.hapusData(kode);
                    cout << "Apakah ingin menghapus data lagi (y/t)? ";
                    cin >> confirm;
                }
                break;
            case 0:
                menu = false;
                break;
        }
    
     }

    return 0;
}
